STL List：
（1）使用双向链表来管理元素
（2）list不支持随机存取，既不提供下标操作符，也不提供at()
（3）任何位置上执行元素的安插和移除都非常快，始终都是常数时间内完成，因为无需移动其他任何元素
（4）安插和删除工作并不会造成指向其他元素的各个pointers、references、iterators失效

Qlist
QList<T>是Qt的一种泛型容器类。它以链表方式存储一组值，它是一个数组列表（array-list），内部用
数组存储链表元素的指针，它结合了QVector和QLinkedList的有点，能对数据进行快速索引，插入删除
不用大量数据移动，非常快速。
（1）它支持随机存取，并且它的接口是基于索引的像QVector那样。
（2）在QList<T>两端插入或删除条目非常快，并且对于多达一千个条目的列表来说从中间插入也很快。
（3）QList与C++中数组的索引方式一样，都是从0开始的。我们可以使用［］操作符来访问位于索引值
处的元素。对于非const链表，操作符[]返回的是该元素的引用，并且返回值可以用途左操作数。由于
QList是以指针数组的形式实现的，该操作能够很快地实现（时间复杂度为常数）。 对于只读访问，
我们可以用at()函数实现访问;
（4）如果需要找出某个值在链表中出现的位置，我们可以使用indexOf()、lastIndexOf()函数来实现。
前者进行前向查找，而后者则进行反向查找。两者都会在找到匹配元素后返回该元素的索引值。若
没有找到匹配元素，则返回-1。

除了以上各自特色外，QList的迭代器除了支持STL的迭代器类型还有一种Java风格的迭代器，其迭代器
指示的位置为第一项之前、两项之间以及最后一项之后的位置；通过next()和previous()自动定位到下
一位置；另外，STL List提供专用函数splice进行元素移动（内部指针交换，提高效率）；

